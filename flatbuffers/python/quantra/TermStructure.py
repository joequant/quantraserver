# automatically generated by the FlatBuffers compiler, do not modify

# namespace: quantra

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TermStructure(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TermStructure()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTermStructure(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TermStructure
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TermStructure
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TermStructure
    def DayCounter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # TermStructure
    def Interpolator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # TermStructure
    def BootstrapTrait(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # TermStructure
    def Points(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from quantra.PointsWrapper import PointsWrapper
            obj = PointsWrapper()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TermStructure
    def PointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TermStructure
    def PointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # TermStructure
    def ReferenceDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Start(builder): builder.StartObject(6)
def TermStructureStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def TermStructureAddId(builder, id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, id)
def AddDayCounter(builder, dayCounter): builder.PrependInt8Slot(1, dayCounter, 0)
def TermStructureAddDayCounter(builder, dayCounter):
    """This method is deprecated. Please switch to AddDayCounter."""
    return AddDayCounter(builder, dayCounter)
def AddInterpolator(builder, interpolator): builder.PrependInt8Slot(2, interpolator, 0)
def TermStructureAddInterpolator(builder, interpolator):
    """This method is deprecated. Please switch to AddInterpolator."""
    return AddInterpolator(builder, interpolator)
def AddBootstrapTrait(builder, bootstrapTrait): builder.PrependInt8Slot(3, bootstrapTrait, 0)
def TermStructureAddBootstrapTrait(builder, bootstrapTrait):
    """This method is deprecated. Please switch to AddBootstrapTrait."""
    return AddBootstrapTrait(builder, bootstrapTrait)
def AddPoints(builder, points): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(points), 0)
def TermStructureAddPoints(builder, points):
    """This method is deprecated. Please switch to AddPoints."""
    return AddPoints(builder, points)
def StartPointsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TermStructureStartPointsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPointsVector(builder, numElems)
def AddReferenceDate(builder, referenceDate): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(referenceDate), 0)
def TermStructureAddReferenceDate(builder, referenceDate):
    """This method is deprecated. Please switch to AddReferenceDate."""
    return AddReferenceDate(builder, referenceDate)
def End(builder): return builder.EndObject()
def TermStructureEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)