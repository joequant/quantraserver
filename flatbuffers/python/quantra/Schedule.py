# automatically generated by the FlatBuffers compiler, do not modify

# namespace: quantra

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Schedule(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Schedule()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSchedule(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Schedule
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Schedule
    def Calendar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Schedule
    def EffectiveDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Schedule
    def TerminationDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Schedule
    def Frequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Schedule
    def Convention(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Schedule
    def TerminationDateConvention(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Schedule
    def DateGenerationRule(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Schedule
    def EndOfMonth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def Start(builder): builder.StartObject(8)
def ScheduleStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddCalendar(builder, calendar): builder.PrependInt8Slot(0, calendar, 0)
def ScheduleAddCalendar(builder, calendar):
    """This method is deprecated. Please switch to AddCalendar."""
    return AddCalendar(builder, calendar)
def AddEffectiveDate(builder, effectiveDate): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(effectiveDate), 0)
def ScheduleAddEffectiveDate(builder, effectiveDate):
    """This method is deprecated. Please switch to AddEffectiveDate."""
    return AddEffectiveDate(builder, effectiveDate)
def AddTerminationDate(builder, terminationDate): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(terminationDate), 0)
def ScheduleAddTerminationDate(builder, terminationDate):
    """This method is deprecated. Please switch to AddTerminationDate."""
    return AddTerminationDate(builder, terminationDate)
def AddFrequency(builder, frequency): builder.PrependInt8Slot(3, frequency, 0)
def ScheduleAddFrequency(builder, frequency):
    """This method is deprecated. Please switch to AddFrequency."""
    return AddFrequency(builder, frequency)
def AddConvention(builder, convention): builder.PrependInt8Slot(4, convention, 0)
def ScheduleAddConvention(builder, convention):
    """This method is deprecated. Please switch to AddConvention."""
    return AddConvention(builder, convention)
def AddTerminationDateConvention(builder, terminationDateConvention): builder.PrependInt8Slot(5, terminationDateConvention, 0)
def ScheduleAddTerminationDateConvention(builder, terminationDateConvention):
    """This method is deprecated. Please switch to AddTerminationDateConvention."""
    return AddTerminationDateConvention(builder, terminationDateConvention)
def AddDateGenerationRule(builder, dateGenerationRule): builder.PrependInt8Slot(6, dateGenerationRule, 0)
def ScheduleAddDateGenerationRule(builder, dateGenerationRule):
    """This method is deprecated. Please switch to AddDateGenerationRule."""
    return AddDateGenerationRule(builder, dateGenerationRule)
def AddEndOfMonth(builder, endOfMonth): builder.PrependBoolSlot(7, endOfMonth, 0)
def ScheduleAddEndOfMonth(builder, endOfMonth):
    """This method is deprecated. Please switch to AddEndOfMonth."""
    return AddEndOfMonth(builder, endOfMonth)
def End(builder): return builder.EndObject()
def ScheduleEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)