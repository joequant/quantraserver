# automatically generated by the FlatBuffers compiler, do not modify

# namespace: quantra

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FRAHelper(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FRAHelper()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFRAHelper(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FRAHelper
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FRAHelper
    def Rate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FRAHelper
    def MonthsToStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FRAHelper
    def MonthsToEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FRAHelper
    def FixingDays(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FRAHelper
    def Calendar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # FRAHelper
    def BusinessDayConvention(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # FRAHelper
    def DayCounter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(7)
def FRAHelperStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddRate(builder, rate): builder.PrependFloat64Slot(0, rate, 0.0)
def FRAHelperAddRate(builder, rate):
    """This method is deprecated. Please switch to AddRate."""
    return AddRate(builder, rate)
def AddMonthsToStart(builder, monthsToStart): builder.PrependInt32Slot(1, monthsToStart, 0)
def FRAHelperAddMonthsToStart(builder, monthsToStart):
    """This method is deprecated. Please switch to AddMonthsToStart."""
    return AddMonthsToStart(builder, monthsToStart)
def AddMonthsToEnd(builder, monthsToEnd): builder.PrependInt32Slot(2, monthsToEnd, 0)
def FRAHelperAddMonthsToEnd(builder, monthsToEnd):
    """This method is deprecated. Please switch to AddMonthsToEnd."""
    return AddMonthsToEnd(builder, monthsToEnd)
def AddFixingDays(builder, fixingDays): builder.PrependInt32Slot(3, fixingDays, 0)
def FRAHelperAddFixingDays(builder, fixingDays):
    """This method is deprecated. Please switch to AddFixingDays."""
    return AddFixingDays(builder, fixingDays)
def AddCalendar(builder, calendar): builder.PrependInt8Slot(4, calendar, 0)
def FRAHelperAddCalendar(builder, calendar):
    """This method is deprecated. Please switch to AddCalendar."""
    return AddCalendar(builder, calendar)
def AddBusinessDayConvention(builder, businessDayConvention): builder.PrependInt8Slot(5, businessDayConvention, 0)
def FRAHelperAddBusinessDayConvention(builder, businessDayConvention):
    """This method is deprecated. Please switch to AddBusinessDayConvention."""
    return AddBusinessDayConvention(builder, businessDayConvention)
def AddDayCounter(builder, dayCounter): builder.PrependInt8Slot(6, dayCounter, 0)
def FRAHelperAddDayCounter(builder, dayCounter):
    """This method is deprecated. Please switch to AddDayCounter."""
    return AddDayCounter(builder, dayCounter)
def End(builder): return builder.EndObject()
def FRAHelperEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)