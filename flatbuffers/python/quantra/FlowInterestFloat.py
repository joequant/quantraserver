# automatically generated by the FlatBuffers compiler, do not modify

# namespace: quantra

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FlowInterestFloat(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FlowInterestFloat()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFlowInterestFloat(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FlowInterestFloat
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FlowInterestFloat
    def Amount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FlowInterestFloat
    def FixingDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlowInterestFloat
    def AccrualStartDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlowInterestFloat
    def AccrualEndDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlowInterestFloat
    def Discount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FlowInterestFloat
    def Rate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FlowInterestFloat
    def Price(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Start(builder): builder.StartObject(7)
def FlowInterestFloatStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddAmount(builder, amount): builder.PrependFloat64Slot(0, amount, 0.0)
def FlowInterestFloatAddAmount(builder, amount):
    """This method is deprecated. Please switch to AddAmount."""
    return AddAmount(builder, amount)
def AddFixingDate(builder, fixingDate): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(fixingDate), 0)
def FlowInterestFloatAddFixingDate(builder, fixingDate):
    """This method is deprecated. Please switch to AddFixingDate."""
    return AddFixingDate(builder, fixingDate)
def AddAccrualStartDate(builder, accrualStartDate): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(accrualStartDate), 0)
def FlowInterestFloatAddAccrualStartDate(builder, accrualStartDate):
    """This method is deprecated. Please switch to AddAccrualStartDate."""
    return AddAccrualStartDate(builder, accrualStartDate)
def AddAccrualEndDate(builder, accrualEndDate): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(accrualEndDate), 0)
def FlowInterestFloatAddAccrualEndDate(builder, accrualEndDate):
    """This method is deprecated. Please switch to AddAccrualEndDate."""
    return AddAccrualEndDate(builder, accrualEndDate)
def AddDiscount(builder, discount): builder.PrependFloat32Slot(4, discount, 0.0)
def FlowInterestFloatAddDiscount(builder, discount):
    """This method is deprecated. Please switch to AddDiscount."""
    return AddDiscount(builder, discount)
def AddRate(builder, rate): builder.PrependFloat32Slot(5, rate, 0.0)
def FlowInterestFloatAddRate(builder, rate):
    """This method is deprecated. Please switch to AddRate."""
    return AddRate(builder, rate)
def AddPrice(builder, price): builder.PrependFloat32Slot(6, price, 0.0)
def FlowInterestFloatAddPrice(builder, price):
    """This method is deprecated. Please switch to AddPrice."""
    return AddPrice(builder, price)
def End(builder): return builder.EndObject()
def FlowInterestFloatEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)