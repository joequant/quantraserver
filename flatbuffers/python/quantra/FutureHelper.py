# automatically generated by the FlatBuffers compiler, do not modify

# namespace: quantra

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FutureHelper(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FutureHelper()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFutureHelper(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FutureHelper
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FutureHelper
    def Rate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FutureHelper
    def FutureStartDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FutureHelper
    def FutureMonths(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FutureHelper
    def Calendar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # FutureHelper
    def BusinessDayConvention(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # FutureHelper
    def DayCounter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(6)
def FutureHelperStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddRate(builder, rate): builder.PrependFloat64Slot(0, rate, 0.0)
def FutureHelperAddRate(builder, rate):
    """This method is deprecated. Please switch to AddRate."""
    return AddRate(builder, rate)
def AddFutureStartDate(builder, futureStartDate): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(futureStartDate), 0)
def FutureHelperAddFutureStartDate(builder, futureStartDate):
    """This method is deprecated. Please switch to AddFutureStartDate."""
    return AddFutureStartDate(builder, futureStartDate)
def AddFutureMonths(builder, futureMonths): builder.PrependInt32Slot(2, futureMonths, 0)
def FutureHelperAddFutureMonths(builder, futureMonths):
    """This method is deprecated. Please switch to AddFutureMonths."""
    return AddFutureMonths(builder, futureMonths)
def AddCalendar(builder, calendar): builder.PrependInt8Slot(3, calendar, 0)
def FutureHelperAddCalendar(builder, calendar):
    """This method is deprecated. Please switch to AddCalendar."""
    return AddCalendar(builder, calendar)
def AddBusinessDayConvention(builder, businessDayConvention): builder.PrependInt8Slot(4, businessDayConvention, 0)
def FutureHelperAddBusinessDayConvention(builder, businessDayConvention):
    """This method is deprecated. Please switch to AddBusinessDayConvention."""
    return AddBusinessDayConvention(builder, businessDayConvention)
def AddDayCounter(builder, dayCounter): builder.PrependInt8Slot(5, dayCounter, 0)
def FutureHelperAddDayCounter(builder, dayCounter):
    """This method is deprecated. Please switch to AddDayCounter."""
    return AddDayCounter(builder, dayCounter)
def End(builder): return builder.EndObject()
def FutureHelperEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)