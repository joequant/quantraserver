# automatically generated by the FlatBuffers compiler, do not modify

# namespace: quantra

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Yield(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Yield()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsYield(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Yield
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Yield
    def DayCounter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Yield
    def Compounding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Yield
    def Frequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(3)
def YieldStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddDayCounter(builder, dayCounter): builder.PrependInt8Slot(0, dayCounter, 0)
def YieldAddDayCounter(builder, dayCounter):
    """This method is deprecated. Please switch to AddDayCounter."""
    return AddDayCounter(builder, dayCounter)
def AddCompounding(builder, compounding): builder.PrependInt8Slot(1, compounding, 0)
def YieldAddCompounding(builder, compounding):
    """This method is deprecated. Please switch to AddCompounding."""
    return AddCompounding(builder, compounding)
def AddFrequency(builder, frequency): builder.PrependInt8Slot(2, frequency, 0)
def YieldAddFrequency(builder, frequency):
    """This method is deprecated. Please switch to AddFrequency."""
    return AddFrequency(builder, frequency)
def End(builder): return builder.EndObject()
def YieldEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)