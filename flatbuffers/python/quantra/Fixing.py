# automatically generated by the FlatBuffers compiler, do not modify

# namespace: quantra

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Fixing(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Fixing()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFixing(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Fixing
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Fixing
    def Date(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Fixing
    def Rate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Start(builder): builder.StartObject(2)
def FixingStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddDate(builder, date): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(date), 0)
def FixingAddDate(builder, date):
    """This method is deprecated. Please switch to AddDate."""
    return AddDate(builder, date)
def AddRate(builder, rate): builder.PrependFloat32Slot(1, rate, 0.0)
def FixingAddRate(builder, rate):
    """This method is deprecated. Please switch to AddRate."""
    return AddRate(builder, rate)
def End(builder): return builder.EndObject()
def FixingEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)