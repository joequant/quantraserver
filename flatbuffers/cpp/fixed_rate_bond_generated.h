// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FIXEDRATEBOND_QUANTRA_H_
#define FLATBUFFERS_GENERATED_FIXEDRATEBOND_QUANTRA_H_

#include "flatbuffers/flatbuffers.h"

#include "enums_generated.h"
#include "schedule_generated.h"

namespace quantra {

struct FixedRateBond;
struct FixedRateBondBuilder;
struct FixedRateBondT;

struct FixedRateBondT : public flatbuffers::NativeTable {
  typedef FixedRateBond TableType;
  int32_t settlement_days = 0;
  double face_amount = 0.0;
  double rate = 0.0;
  quantra::enums::DayCounter accrual_day_counter = quantra::enums::DayCounter_Actual360;
  quantra::enums::BusinessDayConvention payment_convention = quantra::enums::BusinessDayConvention_Following;
  double redemption = 0.0;
  std::string issue_date{};
  std::unique_ptr<quantra::ScheduleT> schedule{};
};

struct FixedRateBond FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FixedRateBondT NativeTableType;
  typedef FixedRateBondBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SETTLEMENT_DAYS = 4,
    VT_FACE_AMOUNT = 6,
    VT_RATE = 8,
    VT_ACCRUAL_DAY_COUNTER = 10,
    VT_PAYMENT_CONVENTION = 12,
    VT_REDEMPTION = 14,
    VT_ISSUE_DATE = 16,
    VT_SCHEDULE = 18
  };
  int32_t settlement_days() const {
    return GetField<int32_t>(VT_SETTLEMENT_DAYS, 0);
  }
  double face_amount() const {
    return GetField<double>(VT_FACE_AMOUNT, 0.0);
  }
  double rate() const {
    return GetField<double>(VT_RATE, 0.0);
  }
  quantra::enums::DayCounter accrual_day_counter() const {
    return static_cast<quantra::enums::DayCounter>(GetField<int8_t>(VT_ACCRUAL_DAY_COUNTER, 0));
  }
  quantra::enums::BusinessDayConvention payment_convention() const {
    return static_cast<quantra::enums::BusinessDayConvention>(GetField<int8_t>(VT_PAYMENT_CONVENTION, 0));
  }
  double redemption() const {
    return GetField<double>(VT_REDEMPTION, 0.0);
  }
  const flatbuffers::String *issue_date() const {
    return GetPointer<const flatbuffers::String *>(VT_ISSUE_DATE);
  }
  const quantra::Schedule *schedule() const {
    return GetPointer<const quantra::Schedule *>(VT_SCHEDULE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SETTLEMENT_DAYS) &&
           VerifyField<double>(verifier, VT_FACE_AMOUNT) &&
           VerifyField<double>(verifier, VT_RATE) &&
           VerifyField<int8_t>(verifier, VT_ACCRUAL_DAY_COUNTER) &&
           VerifyField<int8_t>(verifier, VT_PAYMENT_CONVENTION) &&
           VerifyField<double>(verifier, VT_REDEMPTION) &&
           VerifyOffset(verifier, VT_ISSUE_DATE) &&
           verifier.VerifyString(issue_date()) &&
           VerifyOffset(verifier, VT_SCHEDULE) &&
           verifier.VerifyTable(schedule()) &&
           verifier.EndTable();
  }
  FixedRateBondT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(FixedRateBondT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<FixedRateBond> Pack(flatbuffers::FlatBufferBuilder &_fbb, const FixedRateBondT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct FixedRateBondBuilder {
  typedef FixedRateBond Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_settlement_days(int32_t settlement_days) {
    fbb_.AddElement<int32_t>(FixedRateBond::VT_SETTLEMENT_DAYS, settlement_days, 0);
  }
  void add_face_amount(double face_amount) {
    fbb_.AddElement<double>(FixedRateBond::VT_FACE_AMOUNT, face_amount, 0.0);
  }
  void add_rate(double rate) {
    fbb_.AddElement<double>(FixedRateBond::VT_RATE, rate, 0.0);
  }
  void add_accrual_day_counter(quantra::enums::DayCounter accrual_day_counter) {
    fbb_.AddElement<int8_t>(FixedRateBond::VT_ACCRUAL_DAY_COUNTER, static_cast<int8_t>(accrual_day_counter), 0);
  }
  void add_payment_convention(quantra::enums::BusinessDayConvention payment_convention) {
    fbb_.AddElement<int8_t>(FixedRateBond::VT_PAYMENT_CONVENTION, static_cast<int8_t>(payment_convention), 0);
  }
  void add_redemption(double redemption) {
    fbb_.AddElement<double>(FixedRateBond::VT_REDEMPTION, redemption, 0.0);
  }
  void add_issue_date(flatbuffers::Offset<flatbuffers::String> issue_date) {
    fbb_.AddOffset(FixedRateBond::VT_ISSUE_DATE, issue_date);
  }
  void add_schedule(flatbuffers::Offset<quantra::Schedule> schedule) {
    fbb_.AddOffset(FixedRateBond::VT_SCHEDULE, schedule);
  }
  explicit FixedRateBondBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FixedRateBond> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FixedRateBond>(end);
    return o;
  }
};

inline flatbuffers::Offset<FixedRateBond> CreateFixedRateBond(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t settlement_days = 0,
    double face_amount = 0.0,
    double rate = 0.0,
    quantra::enums::DayCounter accrual_day_counter = quantra::enums::DayCounter_Actual360,
    quantra::enums::BusinessDayConvention payment_convention = quantra::enums::BusinessDayConvention_Following,
    double redemption = 0.0,
    flatbuffers::Offset<flatbuffers::String> issue_date = 0,
    flatbuffers::Offset<quantra::Schedule> schedule = 0) {
  FixedRateBondBuilder builder_(_fbb);
  builder_.add_redemption(redemption);
  builder_.add_rate(rate);
  builder_.add_face_amount(face_amount);
  builder_.add_schedule(schedule);
  builder_.add_issue_date(issue_date);
  builder_.add_settlement_days(settlement_days);
  builder_.add_payment_convention(payment_convention);
  builder_.add_accrual_day_counter(accrual_day_counter);
  return builder_.Finish();
}

inline flatbuffers::Offset<FixedRateBond> CreateFixedRateBondDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t settlement_days = 0,
    double face_amount = 0.0,
    double rate = 0.0,
    quantra::enums::DayCounter accrual_day_counter = quantra::enums::DayCounter_Actual360,
    quantra::enums::BusinessDayConvention payment_convention = quantra::enums::BusinessDayConvention_Following,
    double redemption = 0.0,
    const char *issue_date = nullptr,
    flatbuffers::Offset<quantra::Schedule> schedule = 0) {
  auto issue_date__ = issue_date ? _fbb.CreateString(issue_date) : 0;
  return quantra::CreateFixedRateBond(
      _fbb,
      settlement_days,
      face_amount,
      rate,
      accrual_day_counter,
      payment_convention,
      redemption,
      issue_date__,
      schedule);
}

flatbuffers::Offset<FixedRateBond> CreateFixedRateBond(flatbuffers::FlatBufferBuilder &_fbb, const FixedRateBondT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline FixedRateBondT *FixedRateBond::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<FixedRateBondT>(new FixedRateBondT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void FixedRateBond::UnPackTo(FixedRateBondT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = settlement_days(); _o->settlement_days = _e; }
  { auto _e = face_amount(); _o->face_amount = _e; }
  { auto _e = rate(); _o->rate = _e; }
  { auto _e = accrual_day_counter(); _o->accrual_day_counter = _e; }
  { auto _e = payment_convention(); _o->payment_convention = _e; }
  { auto _e = redemption(); _o->redemption = _e; }
  { auto _e = issue_date(); if (_e) _o->issue_date = _e->str(); }
  { auto _e = schedule(); if (_e) { if(_o->schedule) { _e->UnPackTo(_o->schedule.get(), _resolver); } else { _o->schedule = std::unique_ptr<quantra::ScheduleT>(_e->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<FixedRateBond> FixedRateBond::Pack(flatbuffers::FlatBufferBuilder &_fbb, const FixedRateBondT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateFixedRateBond(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<FixedRateBond> CreateFixedRateBond(flatbuffers::FlatBufferBuilder &_fbb, const FixedRateBondT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const FixedRateBondT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _settlement_days = _o->settlement_days;
  auto _face_amount = _o->face_amount;
  auto _rate = _o->rate;
  auto _accrual_day_counter = _o->accrual_day_counter;
  auto _payment_convention = _o->payment_convention;
  auto _redemption = _o->redemption;
  auto _issue_date = _o->issue_date.empty() ? 0 : _fbb.CreateString(_o->issue_date);
  auto _schedule = _o->schedule ? CreateSchedule(_fbb, _o->schedule.get(), _rehasher) : 0;
  return quantra::CreateFixedRateBond(
      _fbb,
      _settlement_days,
      _face_amount,
      _rate,
      _accrual_day_counter,
      _payment_convention,
      _redemption,
      _issue_date,
      _schedule);
}

inline const quantra::FixedRateBond *GetFixedRateBond(const void *buf) {
  return flatbuffers::GetRoot<quantra::FixedRateBond>(buf);
}

inline const quantra::FixedRateBond *GetSizePrefixedFixedRateBond(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<quantra::FixedRateBond>(buf);
}

inline bool VerifyFixedRateBondBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<quantra::FixedRateBond>(nullptr);
}

inline bool VerifySizePrefixedFixedRateBondBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<quantra::FixedRateBond>(nullptr);
}

inline void FinishFixedRateBondBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<quantra::FixedRateBond> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFixedRateBondBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<quantra::FixedRateBond> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<quantra::FixedRateBondT> UnPackFixedRateBond(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<quantra::FixedRateBondT>(GetFixedRateBond(buf)->UnPack(res));
}

inline std::unique_ptr<quantra::FixedRateBondT> UnPackSizePrefixedFixedRateBond(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<quantra::FixedRateBondT>(GetSizePrefixedFixedRateBond(buf)->UnPack(res));
}

}  // namespace quantra

#endif  // FLATBUFFERS_GENERATED_FIXEDRATEBOND_QUANTRA_H_
