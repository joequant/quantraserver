// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PRICEFIXEDRATEBONDREQUEST_QUANTRA_H_
#define FLATBUFFERS_GENERATED_PRICEFIXEDRATEBONDREQUEST_QUANTRA_H_

#include "flatbuffers/flatbuffers.h"

#include "enums_generated.h"
#include "coupon_pricer_generated.h"
#include "common_generated.h"
#include "schedule_generated.h"
#include "index_generated.h"
#include "floating_rate_bond_generated.h"
#include "fixed_rate_bond_generated.h"
#include "term_structure_generated.h"

namespace quantra {

struct PriceFixedRateBond;
struct PriceFixedRateBondBuilder;
struct PriceFixedRateBondT;

struct PriceFixedRateBondRequest;
struct PriceFixedRateBondRequestBuilder;
struct PriceFixedRateBondRequestT;

struct PriceFixedRateBondT : public flatbuffers::NativeTable {
  typedef PriceFixedRateBond TableType;
  std::unique_ptr<quantra::FixedRateBondT> fixed_rate_bond{};
  std::string discounting_curve{};
  std::unique_ptr<quantra::YieldT> yield{};
};

struct PriceFixedRateBond FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PriceFixedRateBondT NativeTableType;
  typedef PriceFixedRateBondBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FIXED_RATE_BOND = 4,
    VT_DISCOUNTING_CURVE = 6,
    VT_YIELD = 8
  };
  const quantra::FixedRateBond *fixed_rate_bond() const {
    return GetPointer<const quantra::FixedRateBond *>(VT_FIXED_RATE_BOND);
  }
  const flatbuffers::String *discounting_curve() const {
    return GetPointer<const flatbuffers::String *>(VT_DISCOUNTING_CURVE);
  }
  const quantra::Yield *yield() const {
    return GetPointer<const quantra::Yield *>(VT_YIELD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FIXED_RATE_BOND) &&
           verifier.VerifyTable(fixed_rate_bond()) &&
           VerifyOffset(verifier, VT_DISCOUNTING_CURVE) &&
           verifier.VerifyString(discounting_curve()) &&
           VerifyOffset(verifier, VT_YIELD) &&
           verifier.VerifyTable(yield()) &&
           verifier.EndTable();
  }
  PriceFixedRateBondT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PriceFixedRateBondT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<PriceFixedRateBond> Pack(flatbuffers::FlatBufferBuilder &_fbb, const PriceFixedRateBondT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PriceFixedRateBondBuilder {
  typedef PriceFixedRateBond Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_fixed_rate_bond(flatbuffers::Offset<quantra::FixedRateBond> fixed_rate_bond) {
    fbb_.AddOffset(PriceFixedRateBond::VT_FIXED_RATE_BOND, fixed_rate_bond);
  }
  void add_discounting_curve(flatbuffers::Offset<flatbuffers::String> discounting_curve) {
    fbb_.AddOffset(PriceFixedRateBond::VT_DISCOUNTING_CURVE, discounting_curve);
  }
  void add_yield(flatbuffers::Offset<quantra::Yield> yield) {
    fbb_.AddOffset(PriceFixedRateBond::VT_YIELD, yield);
  }
  explicit PriceFixedRateBondBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PriceFixedRateBond> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PriceFixedRateBond>(end);
    return o;
  }
};

inline flatbuffers::Offset<PriceFixedRateBond> CreatePriceFixedRateBond(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<quantra::FixedRateBond> fixed_rate_bond = 0,
    flatbuffers::Offset<flatbuffers::String> discounting_curve = 0,
    flatbuffers::Offset<quantra::Yield> yield = 0) {
  PriceFixedRateBondBuilder builder_(_fbb);
  builder_.add_yield(yield);
  builder_.add_discounting_curve(discounting_curve);
  builder_.add_fixed_rate_bond(fixed_rate_bond);
  return builder_.Finish();
}

inline flatbuffers::Offset<PriceFixedRateBond> CreatePriceFixedRateBondDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<quantra::FixedRateBond> fixed_rate_bond = 0,
    const char *discounting_curve = nullptr,
    flatbuffers::Offset<quantra::Yield> yield = 0) {
  auto discounting_curve__ = discounting_curve ? _fbb.CreateString(discounting_curve) : 0;
  return quantra::CreatePriceFixedRateBond(
      _fbb,
      fixed_rate_bond,
      discounting_curve__,
      yield);
}

flatbuffers::Offset<PriceFixedRateBond> CreatePriceFixedRateBond(flatbuffers::FlatBufferBuilder &_fbb, const PriceFixedRateBondT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct PriceFixedRateBondRequestT : public flatbuffers::NativeTable {
  typedef PriceFixedRateBondRequest TableType;
  std::unique_ptr<quantra::PricingT> pricing{};
  std::vector<std::unique_ptr<quantra::PriceFixedRateBondT>> bonds{};
};

struct PriceFixedRateBondRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PriceFixedRateBondRequestT NativeTableType;
  typedef PriceFixedRateBondRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PRICING = 4,
    VT_BONDS = 6
  };
  const quantra::Pricing *pricing() const {
    return GetPointer<const quantra::Pricing *>(VT_PRICING);
  }
  const flatbuffers::Vector<flatbuffers::Offset<quantra::PriceFixedRateBond>> *bonds() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<quantra::PriceFixedRateBond>> *>(VT_BONDS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PRICING) &&
           verifier.VerifyTable(pricing()) &&
           VerifyOffset(verifier, VT_BONDS) &&
           verifier.VerifyVector(bonds()) &&
           verifier.VerifyVectorOfTables(bonds()) &&
           verifier.EndTable();
  }
  PriceFixedRateBondRequestT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PriceFixedRateBondRequestT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<PriceFixedRateBondRequest> Pack(flatbuffers::FlatBufferBuilder &_fbb, const PriceFixedRateBondRequestT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PriceFixedRateBondRequestBuilder {
  typedef PriceFixedRateBondRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pricing(flatbuffers::Offset<quantra::Pricing> pricing) {
    fbb_.AddOffset(PriceFixedRateBondRequest::VT_PRICING, pricing);
  }
  void add_bonds(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<quantra::PriceFixedRateBond>>> bonds) {
    fbb_.AddOffset(PriceFixedRateBondRequest::VT_BONDS, bonds);
  }
  explicit PriceFixedRateBondRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PriceFixedRateBondRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PriceFixedRateBondRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PriceFixedRateBondRequest> CreatePriceFixedRateBondRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<quantra::Pricing> pricing = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<quantra::PriceFixedRateBond>>> bonds = 0) {
  PriceFixedRateBondRequestBuilder builder_(_fbb);
  builder_.add_bonds(bonds);
  builder_.add_pricing(pricing);
  return builder_.Finish();
}

inline flatbuffers::Offset<PriceFixedRateBondRequest> CreatePriceFixedRateBondRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<quantra::Pricing> pricing = 0,
    const std::vector<flatbuffers::Offset<quantra::PriceFixedRateBond>> *bonds = nullptr) {
  auto bonds__ = bonds ? _fbb.CreateVector<flatbuffers::Offset<quantra::PriceFixedRateBond>>(*bonds) : 0;
  return quantra::CreatePriceFixedRateBondRequest(
      _fbb,
      pricing,
      bonds__);
}

flatbuffers::Offset<PriceFixedRateBondRequest> CreatePriceFixedRateBondRequest(flatbuffers::FlatBufferBuilder &_fbb, const PriceFixedRateBondRequestT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline PriceFixedRateBondT *PriceFixedRateBond::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<PriceFixedRateBondT>(new PriceFixedRateBondT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void PriceFixedRateBond::UnPackTo(PriceFixedRateBondT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = fixed_rate_bond(); if (_e) { if(_o->fixed_rate_bond) { _e->UnPackTo(_o->fixed_rate_bond.get(), _resolver); } else { _o->fixed_rate_bond = std::unique_ptr<quantra::FixedRateBondT>(_e->UnPack(_resolver)); } } }
  { auto _e = discounting_curve(); if (_e) _o->discounting_curve = _e->str(); }
  { auto _e = yield(); if (_e) { if(_o->yield) { _e->UnPackTo(_o->yield.get(), _resolver); } else { _o->yield = std::unique_ptr<quantra::YieldT>(_e->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<PriceFixedRateBond> PriceFixedRateBond::Pack(flatbuffers::FlatBufferBuilder &_fbb, const PriceFixedRateBondT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePriceFixedRateBond(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<PriceFixedRateBond> CreatePriceFixedRateBond(flatbuffers::FlatBufferBuilder &_fbb, const PriceFixedRateBondT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const PriceFixedRateBondT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _fixed_rate_bond = _o->fixed_rate_bond ? CreateFixedRateBond(_fbb, _o->fixed_rate_bond.get(), _rehasher) : 0;
  auto _discounting_curve = _o->discounting_curve.empty() ? 0 : _fbb.CreateString(_o->discounting_curve);
  auto _yield = _o->yield ? CreateYield(_fbb, _o->yield.get(), _rehasher) : 0;
  return quantra::CreatePriceFixedRateBond(
      _fbb,
      _fixed_rate_bond,
      _discounting_curve,
      _yield);
}

inline PriceFixedRateBondRequestT *PriceFixedRateBondRequest::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<PriceFixedRateBondRequestT>(new PriceFixedRateBondRequestT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void PriceFixedRateBondRequest::UnPackTo(PriceFixedRateBondRequestT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = pricing(); if (_e) { if(_o->pricing) { _e->UnPackTo(_o->pricing.get(), _resolver); } else { _o->pricing = std::unique_ptr<quantra::PricingT>(_e->UnPack(_resolver)); } } }
  { auto _e = bonds(); if (_e) { _o->bonds.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->bonds[_i]) { _e->Get(_i)->UnPackTo(_o->bonds[_i].get(), _resolver); } else { _o->bonds[_i] = std::unique_ptr<quantra::PriceFixedRateBondT>(_e->Get(_i)->UnPack(_resolver)); }; } } }
}

inline flatbuffers::Offset<PriceFixedRateBondRequest> PriceFixedRateBondRequest::Pack(flatbuffers::FlatBufferBuilder &_fbb, const PriceFixedRateBondRequestT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePriceFixedRateBondRequest(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<PriceFixedRateBondRequest> CreatePriceFixedRateBondRequest(flatbuffers::FlatBufferBuilder &_fbb, const PriceFixedRateBondRequestT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const PriceFixedRateBondRequestT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _pricing = _o->pricing ? CreatePricing(_fbb, _o->pricing.get(), _rehasher) : 0;
  auto _bonds = _o->bonds.size() ? _fbb.CreateVector<flatbuffers::Offset<quantra::PriceFixedRateBond>> (_o->bonds.size(), [](size_t i, _VectorArgs *__va) { return CreatePriceFixedRateBond(*__va->__fbb, __va->__o->bonds[i].get(), __va->__rehasher); }, &_va ) : 0;
  return quantra::CreatePriceFixedRateBondRequest(
      _fbb,
      _pricing,
      _bonds);
}

inline const quantra::PriceFixedRateBondRequest *GetPriceFixedRateBondRequest(const void *buf) {
  return flatbuffers::GetRoot<quantra::PriceFixedRateBondRequest>(buf);
}

inline const quantra::PriceFixedRateBondRequest *GetSizePrefixedPriceFixedRateBondRequest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<quantra::PriceFixedRateBondRequest>(buf);
}

inline bool VerifyPriceFixedRateBondRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<quantra::PriceFixedRateBondRequest>(nullptr);
}

inline bool VerifySizePrefixedPriceFixedRateBondRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<quantra::PriceFixedRateBondRequest>(nullptr);
}

inline void FinishPriceFixedRateBondRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<quantra::PriceFixedRateBondRequest> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPriceFixedRateBondRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<quantra::PriceFixedRateBondRequest> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<quantra::PriceFixedRateBondRequestT> UnPackPriceFixedRateBondRequest(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<quantra::PriceFixedRateBondRequestT>(GetPriceFixedRateBondRequest(buf)->UnPack(res));
}

inline std::unique_ptr<quantra::PriceFixedRateBondRequestT> UnPackSizePrefixedPriceFixedRateBondRequest(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<quantra::PriceFixedRateBondRequestT>(GetSizePrefixedPriceFixedRateBondRequest(buf)->UnPack(res));
}

}  // namespace quantra

#endif  // FLATBUFFERS_GENERATED_PRICEFIXEDRATEBONDREQUEST_QUANTRA_H_
