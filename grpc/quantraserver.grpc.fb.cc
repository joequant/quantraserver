// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: quantraserver

#include "quantraserver_generated.h"
#include "quantraserver.grpc.fb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace quantra {

static const char* QuantraServer_method_names[] = {
  "/quantra.QuantraServer/PriceFixedRateBond",
  "/quantra.QuantraServer/PriceFloatingRateBond",
};

std::unique_ptr< QuantraServer::Stub> QuantraServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& /*options*/) {
  std::unique_ptr< QuantraServer::Stub> stub(new QuantraServer::Stub(channel));
  return stub;
}

QuantraServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel)  , rpcmethod_PriceFixedRateBond_(QuantraServer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PriceFloatingRateBond_(QuantraServer_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}
  
::grpc::Status QuantraServer::Stub::PriceFixedRateBond(::grpc::ClientContext* context, const flatbuffers::grpc::Message<PriceFixedRateBondRequest>& request, flatbuffers::grpc::Message<PriceFixedRateBondResponse>* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PriceFixedRateBond_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<PriceFixedRateBondResponse>>* QuantraServer::Stub::AsyncPriceFixedRateBondRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<PriceFixedRateBondRequest>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<PriceFixedRateBondResponse>>::Create(channel_.get(), cq, rpcmethod_PriceFixedRateBond_, context, request, true);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<PriceFixedRateBondResponse>>* QuantraServer::Stub::PrepareAsyncPriceFixedRateBondRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<PriceFixedRateBondRequest>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<PriceFixedRateBondResponse>>::Create(channel_.get(), cq, rpcmethod_PriceFixedRateBond_, context, request, false);
}

::grpc::Status QuantraServer::Stub::PriceFloatingRateBond(::grpc::ClientContext* context, const flatbuffers::grpc::Message<PriceFloatingRateBondRequest>& request, flatbuffers::grpc::Message<PriceFloatingRateBondResponse>* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PriceFloatingRateBond_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<PriceFloatingRateBondResponse>>* QuantraServer::Stub::AsyncPriceFloatingRateBondRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<PriceFloatingRateBondRequest>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<PriceFloatingRateBondResponse>>::Create(channel_.get(), cq, rpcmethod_PriceFloatingRateBond_, context, request, true);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<PriceFloatingRateBondResponse>>* QuantraServer::Stub::PrepareAsyncPriceFloatingRateBondRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<PriceFloatingRateBondRequest>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<PriceFloatingRateBondResponse>>::Create(channel_.get(), cq, rpcmethod_PriceFloatingRateBond_, context, request, false);
}

QuantraServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QuantraServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QuantraServer::Service, flatbuffers::grpc::Message<PriceFixedRateBondRequest>, flatbuffers::grpc::Message<PriceFixedRateBondResponse>>(
          std::mem_fn(&QuantraServer::Service::PriceFixedRateBond), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QuantraServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QuantraServer::Service, flatbuffers::grpc::Message<PriceFloatingRateBondRequest>, flatbuffers::grpc::Message<PriceFloatingRateBondResponse>>(
          std::mem_fn(&QuantraServer::Service::PriceFloatingRateBond), this)));
}

QuantraServer::Service::~Service() {
}

::grpc::Status QuantraServer::Service::PriceFixedRateBond(::grpc::ServerContext* /*context*/, const flatbuffers::grpc::Message<PriceFixedRateBondRequest>* /*request*/, flatbuffers::grpc::Message<PriceFixedRateBondResponse>* /*response*/) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QuantraServer::Service::PriceFloatingRateBond(::grpc::ServerContext* /*context*/, const flatbuffers::grpc::Message<PriceFloatingRateBondRequest>* /*request*/, flatbuffers::grpc::Message<PriceFloatingRateBondResponse>* /*response*/) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace quantra

